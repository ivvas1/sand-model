#include <iostream>

#include <glut.h>

using namespace std;

float w = 1000, h = 1000;
GLfloat Size = 1.0;
int g[1000][1000] = { 0 };
bool f = true;
void initialize() {

	glClearColor(1.0, 1.0, 1.0, 1.0);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	glOrtho(-w / 2, w / 2, -h / 2, h / 2, 0.0, 0.1);
	glMatrixMode(GL_MODELVIEW);

}

void draw() {

	glClear(GL_COLOR_BUFFER_BIT);
	glPointSize(Size);
	glBegin(GL_POINTS);
	for (int i = 0; i < w; i++) {
		for (int j = 0; j < h; j++) {
			if (g[i][j] == 0) {
				glColor3d(1.0, 1.0, 1.0);
				glVertex2f(Size*(i - (w / 2)), Size*(j - (h / 2)));
			}
			else if (g[i][j] == 1) {
				glColor3d(1.0, 1.0, 0.0);
				glVertex2f(Size*(i - (w / 2)), Size*(j - (h / 2)));

			}
			else if (g[i][j] == 2) {
				glColor3d(0.0, 0.0, 1.0);
				glVertex2f(Size*(i - (w / 2)), Size*(j - (h / 2)));

			}


		}

	}

	glEnd();
	glFlush();
}
void sandpile() {
	while (f) {
		f = false;
		for (int i = 0; i < w; i++) {
			for (int j = 0; j < h; j++) {
				int x = i - (int)w / 2;
				int	y = j - (int)h / 2;

				if (g[i][j] >= 3 && (x*x + y * y <= 250000)) {
					if ((x + y) % 3 == 0) {
						while (g[i][j] >= 3) {
							f = true;
							g[i][j] -= 3;
							if (i - 1 >= 0 && (y*y + (x - 1)*(x - 1) <= 250000))g[i - 1][j]++;
							if (j - 1 >= 0 && ((y - 1)*(y - 1) + x * x <= 250000))g[i][j - 1]++;
							if ((i + 1) < w && (j + 1 < h) && ((y + 1)*(y + 1) + (x + 1)*(x + 1) <= 250000))g[i + 1][j + 1]++;
						}
					}
					else if ((x + y - 2) % 3 == 0 && (x*x + y * y <= 250000)) {
						while (g[i][j] >= 3) {
							f = true;
							g[i][j] -= 3;
							if (i + 1 < w && ((x + 1)*(x + 1) + y * y <= 250000))g[i + 1][j]++;
							if (j + 1 < h && ((y + 1)*(y + 1) + x * x <= 250000))g[i][j + 1]++;
							if ((i - 1 >= 0) && (j - 1 >= 0) && ((x - 1)*(x - 1) + (y - 1)*(y - 1) <= 250000))g[i - 1][j - 1]++;
						}
					}
				}

			}
		}
	}
}

int main(int argc, char** argv) {
	for (int i = 0; i < w; i++) {
		for (int j = 0; j < h; j++) {
			int x = i - (int)w / 2;
			int	y = j - (int)h / 2;
			if ((x + y - 1) % 3 != 0 && (x*x + y * y <= 250000))g[i][j] = 4;
		}
	}
	sandpile();
	f = true;
	for (int i = 0; i < w; i++) {
		for (int j = 0; j < h; j++) {
			int x = i - (int)w / 2;
			int	y = j - (int)h / 2;
			if ((x + y - 1) % 3 != 0 && (x*x + y * y <= 250000))g[i][j] = 4 - g[i][j];
		}
	}
	sandpile();
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
	glutInitWindowSize(w, h);
	glutCreateWindow("sandpile26b");
	glutDisplayFunc(draw);
	initialize();
	glutMainLoop();

}
